{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x5c91e8Bcbc0Cf4692728f1C710deF7c13C102646",
    "txHash": "0xae091bd8936050db67b0584801f4f715c3575191be64924d6e7ff84edba87b1d"
  },
  "proxies": [
    {
      "address": "0xa0fF49c4E8ae29C880d995F22176Ff57c1307b56",
      "txHash": "0xb4b2b6d5b7fc5238f710beba6b60be81146400f5932bf83b77b9f46030073821",
      "kind": "transparent"
    },
    {
      "address": "0xBc6b3f1B5233380C118a30aA4B6c02234D161FF3",
      "txHash": "0xfc421008a4dc33e3e6dddbe8bcf080ee7581b596629d0a7a29a9820c8a157075",
      "kind": "transparent"
    },
    {
      "address": "0xE33F16eB55A0628e7bA10E7b7a5c9f170801cB23",
      "txHash": "0x2bd87d99fe7e28ea1a0da5c840352f0127f704a54a4d68a7e1110b1073a81f08",
      "kind": "transparent"
    },
    {
      "address": "0xdF3a1e5531C260D527bf18ca3028F023bbd886e8",
      "txHash": "0xbba91a318dc31d15dd2a9dad7f834ab8cfcf21e7f8757a1726d29f0942c78b5c",
      "kind": "transparent"
    },
    {
      "address": "0x4b047A9ccf789A615827354c2f3FEDC8b9ca35fF",
      "txHash": "0x0621dd2bb5f90d9ba11ba6808dff3eb6144984d7d743a1859c2946fca29f1c2c",
      "kind": "transparent"
    },
    {
      "address": "0x1EdD30a90847E498b85B2755b5915eDdd322e700",
      "txHash": "0x3b056bc9d043d5ff7fccb7e79c1550c392f3ac3fbe932d5415db6cb46ff57366",
      "kind": "transparent"
    }
  ],
  "impls": {
    "16c2824dc2774aac7ed3a456ac006157b1b3f78f635822dc3fa8b1d4e2620eeb": {
      "address": "0xbB8AAD63bD62fB8c51259674C50741E2df1c2cf9",
      "txHash": "0x28126d40b17b39524f63c135d791c9b29fd477005bc57c5f92852d2ad07bd7eb",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "_blacklisted",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "TetherToken",
            "src": "contracts\\tetherToken.sol:14"
          },
          {
            "label": "basisPointsRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "TetherToken",
            "src": "contracts\\tetherToken.sol:17"
          },
          {
            "label": "maximumFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "TetherToken",
            "src": "contracts\\tetherToken.sol:18"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ERC20Storage)144_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)64_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(OwnableStorage)14_storage": {
            "label": "struct OwnableUpgradeable.OwnableStorage",
            "members": [
              {
                "label": "_owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)236_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
